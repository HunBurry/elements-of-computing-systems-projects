// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array myString;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let myString = Array.new(maxLength);
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(myString);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return myString[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let myString[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let myString[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, total, hold;
		var boolean isNegtive, isIn;

        let isNegtive = false;
        let i = length;
        let total = 0;
        while((i > 0) & (myString[i] > 47) & (myString[i] < 58)) {
            if(myString[0] = "45") {
                isNegtive = true;
            }
            ///let isIn = false;
            ///let hold = 0;
            ///while (hold < 10) {
            /*
            if ((myString[i] > 47) & (myString[i] < 58)) {
                let isIn = true;
            }
            */
            ///let hold = hold + 1;
            ///}
           //// if(isIn) {
                ///okay so i forgot that you can just grab characters here like in other languages so we have to do weird ascii stuff :(
                    ////okay so this didn't work because things got added together. like a + b (1 + 2) should be 12 but is 3. so we have to 10*1 everyhintg
            let total = (total * 10) + (myString[i] - 48);
           /// }
            let i = i - 1;
        }
        if (isNegtive) {
            return (total * -1);
        }
        else {
            return total;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int hold;
        let length = 0;
        if (number < 0) {
            let number = number * -1;
            do appendChar(45);
        }
        if (number = 0) {
            do appendChar(48);
            return;
        }
        else {
            if(number < 10) {
                do appendChar(number + 48);
            }
            else {
                let hold = number;
                while (hold > 10) {
                    ///inverse of the 10* total thing 
                    let hold = hold / 10;
                    do appendChar(48); //add a zero to it? idk 
                }
                do appendChar(48 + number);
            }
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
